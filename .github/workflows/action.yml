name: Download and Convert Video to 480p

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL of the file to download'
        required: true
        type: string

jobs:
  process-video:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Install ffmpeg
      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests tqdm

      # Create a directory for downloads and converted files
      - name: Create directories
        run: |
          mkdir -p downloads
          mkdir -p converted

      # Download file with progress bar
      - name: Download file
        run: |
          python -c "
          import requests
          from tqdm import tqdm
          import os

          url = '${{ github.event.inputs.file_url }}'
          filename = url.split('/')[-1]
          output_path = f'downloads/{filename}'

          response = requests.get(url, stream=True)
          total_size = int(response.headers.get('content-length', 0))
          
          # Download with progress bar
          with tqdm(total=total_size, unit='B', unit_scale=True, desc=filename) as progress:
              with open(output_path, 'wb') as f:
                  for chunk in response.iter_content(chunk_size=8192):
                      if chunk:
                          f.write(chunk)
                          progress.update(len(chunk))
          "

      # Convert video files to 480p, rename, and delete originals
      - name: Convert videos to 480p
        run: |
          python -c "
          import os
          import subprocess
          import glob

          download_dir = 'downloads'
          converted_dir = 'converted'

          # Supported video extensions
          video_extensions = ['*.mp4', '*.mkv', '*.avi', '*.mov', '*.flv', '*.wmv']

          for ext in video_extensions:
              for file_path in glob.glob(f'{download_dir}/{ext}'):
                  filename = os.path.basename(file_path)
                  # Replace spaces with dots
                  new_filename = '480' + filename.replace(' ', '.')
                  output_path = os.path.join(converted_dir, new_filename)

                  # Convert video to 480p with automatic adjustments
                  cmd = [
                      'ffmpeg',
                      '-i', file_path,
                      '-vf', 'scale=-2:480',
                      '-c:v', 'libx264',
                      '-preset', 'medium',
                      '-crf', '23',
                      '-c:a', 'aac',
                      '-b:a', '128k',
                      '-y',  # Overwrite output files without asking
                      output_path
                  ]
                  subprocess.run(cmd, check=True)
                  
                  # Delete original file
                  os.remove(file_path)
          "

      # Create a release and upload converted files
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: Latest Release
          draft: false
          prerelease: false

      # Upload converted files to the release
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: converted/*
          asset_name: '*.mp4,*.mkv,*.avi,*.mov,*.flv,*.wmv'
          asset_content_type: video/*

      # Clean up directories
      - name: Clean up
        run: |
          rm -rf downloads converted
