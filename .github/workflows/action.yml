name: Download Workflow

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'URL, magnet, torrent link, or .txt file URL to download'
        required: true
      compress:
        description: 'Compress applicable files (e.g., videos to 480p, images, audio)'
        type: boolean
        default: false
      archive:
        description: 'Archive each file individually with maximum compression'
        type: boolean
        default: false

jobs:
  download:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update || { echo "Failed to update package lists"; exit 1; }
        sudo apt-get install -y wget curl aria2 ffmpeg p7zip-full chromium-chromedriver || { echo "Failed to install system dependencies"; exit 1; }
      continue-on-error: false

    - name: Install Python dependencies
      run: |
        pip install --no-cache-dir selenium requests pillow beautifulsoup4 python-magic || { echo "Failed to install Python dependencies"; exit 1; }
      continue-on-error: false

    - name: Run download script
      run: |
        echo "Running download.py with URL: ${{ github.event.inputs.url }}"
        python download.py "${{ github.event.inputs.url }}" ${{ github.event.inputs.compress }} ${{ github.event.inputs.archive }} 2> download_error.log || {
          echo "Error: download.py failed. Check logs for details."
          cat download_error.log
          exit 1
        }
      continue-on-error: false

    - name: Check files directory
      run: |
        if [ ! -d "files" ]; then
          echo "Error: 'files' directory does not exist"
          exit 1
        fi
        FILES=$(ls files/* 2>/dev/null | grep -v -e download.py -e url.txt -e readme.md || true)
        if [ -z "$FILES" ]; then
          echo "Error: No files found in 'files' directory"
          exit 1
        fi
      continue-on-error: false

    - name: Prepare release notes
      id: notes
      run: |
        NOTES="Downloaded files:\n"
        for file in files/*; do
          if [ -f "$file" ] && [ "$(basename "$file")" != "download.py" ] && [ "$(basename "$file")" != "url.txt" ] && [ "$(basename "$file")" != "readme.md" ]; then
            filename=$(basename "$file")
            NOTES="$NOTES- https://github.com/${{ github.repository }}/releases/download/latest/$filename\n"
          fi
        done
        if [ "$NOTES" = "Downloaded files:\n" ]; then
          echo "Error: No valid files found for release notes"
          exit 1
        fi
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      continue-on-error: false

    - name: Create or update latest release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e  # Exit on error for non-handled commands

        # Verify GITHUB_TOKEN is set
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "Error: GITHUB_TOKEN is not set or invalid"
          exit 1
        fi

        # Delete existing 'latest' release, ignore if it doesn't exist
        gh release delete latest --yes 2>/dev/null || echo "No existing 'latest' release found or deletion failed, continuing..."

        # Delete 'latest' tag, ignore if it doesn't exist
        git push origin :latest 2>/dev/null || echo "No existing 'latest' tag found or deletion failed, continuing..."

        # Verify files exist
        FILES=$(ls files/* 2>/dev/null | grep -v -e download.py -e url.txt -e readme.md || true)
        if [ -z "$FILES" ]; then
          echo "Error: No files found for release"
          exit 1
        fi

        # Verify notes output
        if [ -z "${{ steps.notes.outputs.notes }}" ]; then
          echo "Error: Release notes are empty"
          exit 1
        fi

        # Create new release with retry logic
        for attempt in {1..3}; do
          if gh release create latest $FILES \
            --title "Latest Downloads" \
            --notes "${{ steps.notes.outputs.notes }}"; then
            echo "Successfully created release"
            break
          else
            echo "Attempt $attempt: Failed to create GitHub release"
            if [ $attempt -eq 3 ]; then
              echo "Error: Failed to create release after $attempt attempts"
              exit 1
            fi
            sleep 5  # Wait before retrying
          fi
        done
      continue-on-error: false

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "Workflow failed, cleaning up temporary files..."
        rm -rf files/* 2>/dev/null || true
        rm -f download_error.log 2>/dev/null || true
