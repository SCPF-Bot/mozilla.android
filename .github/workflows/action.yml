name: Download and Convert Video to 480p

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'URL of the file or torrent page to download (supports direct URLs, magnet links, or torrent detail pages from various sites)'
        required: true
        type: string

jobs:
  process-video:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y ffmpeg wget curl aria2
          pip install requests beautifulsoup4
      - name: Create directories
        run: mkdir -p downloads converted
      - name: Download file
        run: |
          python -c "
          import requests, os, subprocess, re
          from bs4 import BeautifulSoup
          url = '${{ github.event.inputs.file_url }}'.strip()
          ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'
          if url.startswith('magnet:'):
              subprocess.run(['aria2c', '--dir=downloads', '--seed-time=0', '--summary-interval=10', url], check=True)
          else:
              head_r = requests.head(url, headers={'User-Agent': ua}, timeout=10, allow_redirects=True)
              content_type = head_r.headers.get('Content-Type', '').lower()
              if 'text/html' in content_type:
                  r = requests.get(url, headers={'User-Agent': ua}, timeout=10)
                  r.raise_for_status()
                  soup = BeautifulSoup(r.text, 'html.parser')
                  magnet = next((a['href'] for a in soup.find_all('a', href=lambda h: h and h.startswith('magnet:')), None) or \
                           next((a['href'] for d in soup.find_all('div', class_=re.compile('download|magnet|torrent')) for a in d.find_all('a', href=lambda h: h and h.startswith('magnet:'))), None) or \
                           next((a['href'] for a in soup.find_all('a', string=re.compile('magnet|download|torrent|get.*torrent', re.I)) if a.get('href', '').startswith('magnet:')), None)
                  if not magnet:
                      with open('page.html', 'w') as f: f.write(soup.prettify())
                      raise ValueError('No magnet link found on the page')
                  subprocess.run(['aria2c', '--dir=downloads', '--seed-time=0', '--summary-interval=10', magnet], check=True)
              else:
                  subprocess.run(['curl', '--retry', '3', '--head', '--fail', '--silent', '--user-agent', ua, url], check=True)
                  filename = url.split('/')[-1]
                  subprocess.run(['wget', '--progress=bar:force', f'--output-document=downloads/{filename}', '--user-agent', ua, url], check=True)
          "
      - name: Convert videos to 480p
        run: |
          python -c "
          import glob, os, subprocess
          for f in glob.glob('downloads/**/*.mp4', recursive=True) + glob.glob('downloads/**/*.{mkv,avi,mov,flv,wmv}', recursive=True):
              out = f'converted/480{os.path.basename(f).replace(' ', '.')}'
              subprocess.run(['ffmpeg', '-i', f, '-vf', 'scale=-2:480', '-c:v', 'libx264', '-preset', 'medium', '-crf', '23', '-c:a', 'aac', '-b:a', '128k', '-y', out], check=True)
              os.remove(f)
          "
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: Latest Release
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: converted/*
          asset_name: '*.mp4,*.mkv,*.avi,*.mov,*.flv,*.wmv'
          asset_content_type: video/*
      - name: Clean up
        run: rm -rf downloads converted
